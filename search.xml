<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java面试题</title>
    <url>/2019/11/04/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Java面试题总结"><a href="#Java面试题总结" class="headerlink" title="Java面试题总结"></a>Java面试题总结</h1><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="JDK和JRE的区别"><a href="#JDK和JRE的区别" class="headerlink" title="JDK和JRE的区别"></a>JDK和JRE的区别</h3><pre><code>JDK：java开发工具包，提供了java的开发环境和运行环境。
JRE:java运行环境，为java的运行提供了所需环境
JDK包含JRE、编译java源码的编译器javac和java程序调试和分析的工具。
如果只是运行java程序，安装JRE就可以了，需要编写Java程序，需要安装JDK。</code></pre><a id="more"></a>
<h3 id="和equals的区别"><a href="#和equals的区别" class="headerlink" title="==和equals的区别"></a>==和equals的区别</h3><pre><code>==：
    基本类型：比较值是否相同；
    引用类型：比较地址值是否相同；</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String x = <span class="string">"string"</span>;</span><br><span class="line">String y = <span class="string">"string"</span>;</span><br><span class="line">String z = <span class="keyword">new</span> String(<span class="string">"string"</span>);</span><br><span class="line">System.out.println(x==y); <span class="comment">// true</span></span><br><span class="line">System.out.println(x==z); <span class="comment">// false</span></span><br><span class="line">System.out.println(x.equals(y)); <span class="comment">// true</span></span><br><span class="line">System.out.println(x.equals(z)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<pre><code>equals：
    String和Integer等重写equals方法，此时比较值是否相同</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object类中equals本质是==，</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hashcode和equal"><a href="#hashcode和equal" class="headerlink" title="hashcode和equal"></a>hashcode和equal</h3><pre><code>两个对象的hashcode相同，equals不一定为true，
两个对象的equals为true，hashcode一定相同</code></pre><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><pre><code>fianl修饰的类叫最终类，该类不能被继承
final修饰的方法不能被重写
final修饰的变量是常量
    final修饰基本类型的局部变量，基本类型的值不能发生改变
    final修饰引用类型的局部变量，引用类型的地址值不能发生改变，但是对象的堆内存的值可以改变。</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> StringBuffer a = <span class="keyword">new</span> StringBuffer(<span class="string">"a"</span>);</span><br><span class="line">a = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);编译报错</span><br><span class="line">a.append(<span class="string">"b"</span>);编译成功</span><br></pre></td></tr></table></figure>
<h3 id="一个”-java”源文件是否可以包括多个类（不是内部类）？有什么限制？"><a href="#一个”-java”源文件是否可以包括多个类（不是内部类）？有什么限制？" class="headerlink" title="一个”.java”源文件是否可以包括多个类（不是内部类）？有什么限制？"></a>一个”.java”源文件是否可以包括多个类（不是内部类）？有什么限制？</h3><pre><code>可以有多个类，但是只能有一个public的类，并且public的类名必须与文件名一致</code></pre><h3 id="amp-与-amp-amp-的区别"><a href="#amp-与-amp-amp-的区别" class="headerlink" title="&amp;与&amp;&amp;的区别"></a>&amp;与&amp;&amp;的区别</h3><pre><code>&amp;是逻辑与运算符和位运算符，只有当两边表达式都为true，运算结果才为true
&amp;&amp;是逻辑与运算符，但是具有短路效果，只要第一个表达式为false，则不再计算第二个表达式
if(str!=null&amp;&amp;!str.equals(&quot;&quot;))，str为null时，后面的不会执行，不会出现NullPointerException，反之，&amp;会报错。</code></pre><h3 id="如何在Java中跳出当前的多重嵌套循环"><a href="#如何在Java中跳出当前的多重嵌套循环" class="headerlink" title="如何在Java中跳出当前的多重嵌套循环"></a>如何在Java中跳出当前的多重嵌套循环</h3><pre><code>在外层的循环语句前定义一个标号，然后在内层循环体的代码中使用带有标号break语句，即可跳出外层循环。</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        method1();  </span><br><span class="line">        method2();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//方法一：  利用标签</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        tag:<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;  </span><br><span class="line">                System.out.println(<span class="string">"i="</span>+i+<span class="string">",j="</span>+j);  </span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">5</span>)&#123;  </span><br><span class="line">                    <span class="keyword">break</span> tag;<span class="comment">//跳到循环外的tag出，即终止整个循环  </span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//方法二：  增加循环条件判断</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>&#125;&#125;;  </span><br><span class="line">        <span class="keyword">boolean</span> found = <span class="keyword">false</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length &amp;&amp; !found;i++)&#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;  </span><br><span class="line">                System.out.println(<span class="string">"i="</span>+i+<span class="string">",j="</span>+j);  </span><br><span class="line">                <span class="keyword">if</span>(arr[i][j]==<span class="number">5</span>)&#123;  </span><br><span class="line">                    found = <span class="keyword">true</span>;<span class="comment">//找到5，使外层循环判断条件变为false则终止整个循环  </span></span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//跳出当前循环  </span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch能否作用在long上"><a href="#switch能否作用在long上" class="headerlink" title="switch能否作用在long上"></a>switch能否作用在long上</h3><pre><code>不能，switch可以作用在byte、short、char、int、枚举、String。</code></pre><h3 id="short-s1-1；s1-1；是否编译成功？"><a href="#short-s1-1；s1-1；是否编译成功？" class="headerlink" title="short s1 = 1；s1 +=1；是否编译成功？"></a>short s1 = 1；s1 +=1；是否编译成功？</h3><pre><code>由于+=是Java语言规定的运算符，Java编译器会对它进行类型转换，s1 = (short) (s1+1)，所以可以编译成功。</code></pre><h3 id="char类型可以存储一个中文汉字吗？"><a href="#char类型可以存储一个中文汉字吗？" class="headerlink" title="char类型可以存储一个中文汉字吗？"></a>char类型可以存储一个中文汉字吗？</h3><pre><code>因为java使用的编码Unicode，char类型是存储Unicode编码的字符，Unicode编码中有汉字字符，所以可以存储，一个汉字占两个字节（UTF-8中一个汉字占三个字节）。</code></pre><h3 id="静态变量和实例变量的区别"><a href="#静态变量和实例变量的区别" class="headerlink" title="静态变量和实例变量的区别"></a>静态变量和实例变量的区别</h3><pre><code>静态变量：
     1. 被static关键字修饰
     2. 属于类
     3. 加载类的字节码，静态变量就会被分配空间
     4. 可以直接使用类名调用
实例变量：
     1. 属于对象的属性
     2. 创建实例对象，实例变量才会被分配空间
     3. 必须创建对象后，通过对象来使用</code></pre>]]></content>
  </entry>
</search>
